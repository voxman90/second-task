mixin dropdown(args = {})
  -
    const { options, hasButtons = false, hasLargeWidth = false } = args
    const rootMod = (hasLargeWidth) ? ' dropdown_width_large' : ''
    const rootClass = 'dropdown' + rootMod

  div(class=rootClass)&attributes(attributes)
    +label(args)
      +dropdown__readout(args)
      .dropdown__trigger.js-dropdown__trigger
        +icon({ name: 'expand_more' })
    div(class='dropdown__bar js-dropdown__bar dropdown__bar_hidden')
      .js-dropdown__options
        each option in options
          +dropdown__option(option)
      if hasButtons
        +dropdown__buttons(name)

mixin dropdown__readout(args)
  - const { name = 'guests' } = args
  div(class='dropdown__readout js-dropdown__readout')
  input(name=name, class='dropdown__input js-dropdown__input', type='text', multiple=true)

mixin dropdown__option(args)
  - const { descr, name, value } = args
  - const buttonMinusMod = (value === 0) ? 'dropdown__option-button_faded' : ''
  .dropdown__option.js-dropdown__option
    .dropdown__option-descr= descr
    div(class=`dropdown__option-button dropdown__option-button_minus ${buttonMinusMod}`, role='button', tabindex='0')= '-'
    div(class='dropdown__option-output js-dropdown__option-output', data-name=name)= value
    div(class='dropdown__option-button', role='button', tabindex='0')= '+'

mixin dropdown__buttons(name)
  .dropdown__buttons
    .dropdown__button-clear.js-dropdown__button
      +button({ text: 'очистить' })
    .dropdown__button-apply.js-dropdown__button
      +button({ text: 'применить' })
